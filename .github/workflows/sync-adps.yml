name: Sync ADPs

on:
  schedule:
    - cron: '0,15,30,45 * * * *'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  sync_adps:
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Find new ADP
        id: find_new_adp
        env:
          ASC_API_KEY: ${{ secrets.ASC_API_KEY }}
          ASC_API_KEY_ID: ${{ secrets.ASC_API_KEY_ID }}
        run: |
          echo "$ASC_API_KEY" > asc_api_key.p8
          jwt_header=$(jq -nc --arg kid "$ASC_API_KEY_ID" '{alg:"ES256",kid:$kid,typ:"JWT"}')
          now=$(date +%s)
          jwt_payload=$(jq -nc --arg iss "$ASC_API_KEY_ID" --arg aud "appstoreconnect-v1" --argjson iat "$now" --argjson exp "$((now+1200))" '{iss:$iss,iat:$iat,exp:$exp,aud:$aud}')
          b64url() { openssl base64 -A | tr '+/' '-_' | tr -d '='; }
          header_b64=$(printf '%s' "$jwt_header"  | b64url)
          payload_b64=$(printf '%s' "$jwt_payload" | b64url)
          signing_input="$header_b64.$payload_b64"
          signature=$(printf '%s' "$signing_input" | openssl dgst -sha256 -sign asc_api_key.p8 -binary | openssl base64 -A | tr '+/' '-_' | tr -d '=')
          token="$signing_input.$signature"
          apps_json=$(curl -sS -g -H "Authorization: Bearer $token" "https://api.appstoreconnect.apple.com/v1/apps?filter%5BreviewSubmissions.platform%5D=IOS&limit=200")
          app_meta=$(printf '%s' "$apps_json" | jq -r '.data[] | [.id, .attributes.bundleId] | @tsv')
          app_ids=$(printf '%s\n' "$app_meta" | cut -f1)
          local_ids=$( { ls -1 adps 2>/dev/null | grep -v '^\.' | grep -E '^[a-f0-9-]{36}$' || true; } )
          adp_records=""
          for id in $app_ids; do
            bundle_id=$(printf '%s\n' "$app_meta" | awk -v id="$id" -F'\t' '$1==id{print $2; exit}')
            versions_json=$(curl -sS -g -H "Authorization: Bearer $token" "https://api.appstoreconnect.apple.com/v1/apps/$id/appStoreVersions?include=alternativeDistributionPackage&fields%5BappStoreVersions%5D=platform,versionString,appVersionState,reviewType,alternativeDistributionPackage&limit=50")
            recs=$(printf '%s' "$versions_json" | jq -r '.data[] | select(.attributes.appVersionState=="READY_FOR_DISTRIBUTION" and .attributes.reviewType=="NOTARIZATION") | [(.relationships.alternativeDistributionPackage.data.id // empty), "'$bundle_id'", .attributes.versionString] | @tsv' | awk 'NF')
            [ -n "${recs:-}" ] && adp_records="${adp_records}${adp_records:+\n}${recs}"
          done
          adp_records_dedup=$(printf '%s\n' "$adp_records" | awk -F'\t' '!seen[$1]++')
          new_adp=""
          for rec in $(printf '%s\n' "$adp_records_dedup"); do
            adp_id=$(echo "$rec" | cut -f1)
            if ! printf '%s\n' "$local_ids" | grep -Fxq "$adp_id"; then
              new_adp="$adp_id"
              break
            fi
          done
          if [ -z "$new_adp" ]; then
            echo "No new ADP IDs found."
            exit 0
          fi
          echo "Found new ADP: $new_adp"
          altstore_response=$(curl -s -X GET "https://api.altstore.io/adps/$new_adp")
          if echo "$altstore_response" | jq -e '.downloadURL' >/dev/null; then
            echo "ADP $new_adp processed by AltStore."
            echo "adp_id=$new_adp" >> $GITHUB_OUTPUT
          else
            echo "ADP $new_adp not processed by AltStore."
            exit 0
          fi
      - name: Call Deployment Workflow
        if: steps.find_new_adp.outputs.adp_id
        uses: ./.github/workflows/main.yml
        with:
          deploy_type: process_adp_and_deploy
          adp_id: ${{ steps.find_new_adp.outputs.adp_id }}

